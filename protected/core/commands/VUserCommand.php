<?php
/**
 * ViraCMS Site Administrators Management Console Command
 *
 * @package vira.core.core
 * @version 1.0.0
 * @copyright (c) 2015-2017, Vira Technologies http://viratechnologies.ru/
 * @author Eugene V Chernyshev <dev@vira-tech.ru>
 * @license http://market.viracms.ru/legal/ Vira Technologies License Agreements
 * @link https://github.com/ViraTech/ViraCMS ViraCMS community revision git repository
 */
class VUserCommand extends CConsoleCommand
{
  /**
   * @var string default command action name
   */
  public $defaultAction = 'list';

  /**
   * @var boolean suppress output messages
   */
  private $_quiet = false;

  /**
   * Runs after action. If command has ran in quiet mode then return non-integer value to prevent exit() in the end.
   * @param string $action the action name
   * @param array $params the parameters to be passed to the action method.
   * @param integer $exitCode the application exit code returned by the action method.
   * @return mixed
   */
  protected function afterAction($action, $params, $exitCode = 0)
  {
    if ($this->_quiet) {
      return '';
    }
    else {
      return parent::afterAction($action, $params, $exitCode);
    }
  }

  /**
   * Render the list of site administrators
   */
  public function actionList()
  {
    $admins = VSiteAdmin::model()->findAll();
    if ($admins) {
      echo strtr('Found {n} account(s):', array(
        '{n}' => count($admins),
      )) . PHP_EOL;
      foreach ($admins as $admin) {
        echo ' * ' . $admin->username . ' <' . $admin->email . '>' . PHP_EOL;
      }
    }
    else {
      echo 'No administrator accounts has been found.';
    }
  }

  /**
   * Add new site administrator
   * @param string $username username
   * @param string $email e-mail address
   * @param string $password password
   * @param string $language language identifier
   * @param boolean $quiet suppress output messages
   */
  public function actionAdd($username, $email, $password = null, $language = null, $quiet = false)
  {
    $this->_quiet = $quiet;
    $admin = new VSiteAdmin('create');
    $admin->setAttributes(array(
      'id' => Yii::app()->guid->random(),
      'roleID' => VAccountRole::DEFAULT_ROLE,
      'status' => VAccountTypeCollection::STATUS_ADMINISTRATOR_ACTIVE,
      'languageID' => $language ? $language : substr(Yii::app()->getLanguage(), 0, 2),
      'name' => mb_convert_case($username, MB_CASE_TITLE),
      'username' => $username,
      'email' => $email,
      ), false);
    $password = $this->getPassword($password);
    $admin->newPassword = $password;
    $admin->newPasswordConfirm = $password;
    $this->saveModel(
      $admin, 'Administrator account has been created successfully.', 'Some error(s) occurred while trying to create new administrator:'
    );
  }

  /**
   * Reset password for selected site administrator
   * @param string $username username
   * @param string $password new password
   * @param boolean $quiet suppress output messages
   */
  public function actionReset($username, $password = null, $quiet = false)
  {
    $this->_quiet = $quiet;
    $admin = VSiteAdmin::model()->findByAttributes(array('username' => $username));
    if ($admin == null) {
      echo 'No administrator with provided username has been found.' . PHP_EOL;
    }
    else {
      $password = $this->getPassword($password);
      $admin->setPassword($password);
      $this->saveModel(
        $admin, 'Password has been updated successfully.', 'Some error(s) occurred while trying to update password:'
      );
    }
  }

  /**
   * Propose to enter new password with generated password option
   * When suppress of output messages is enabled (@see self::$_quiet) password will be autogenerated
   * @param string $password (optional) new password
   * @return string password
   */
  protected function getPassword($password)
  {
    if ($password == null) {
      $defaultPassword = Yii::app()->passwordGenerator->generate();
      $password = !$this->_quiet ? $this->prompt('Please enter the password:', $defaultPassword) : $defaultPassword;
    }

    return $password;
  }

  /**
   * Save updated site administrator model
   * @param VSiteAdmin $model model
   * @param string $successMessage success message
   * @param string $errorMessage error message
   */
  protected function saveModel($model, $successMessage, $errorMessage)
  {
    $success = $model->save(!$this->_quiet);
    if (!$this->_quiet) {
      if ($success) {
        echo $successMessage . PHP_EOL;
      }
      else {
        echo $errorMessage . PHP_EOL;
        foreach ($model->getErrors() as $attribute => $errors) {
          foreach ($errors as $error) {
            echo ' * ' . $error . PHP_EOL;
          }
        }
      }
    }
  }
}
